// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/21/2020 14:34:04"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MCD
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MCD_vlg_sample_tst(
	clk,
	DataIn,
	reset,
	sampler_tx
);
input  clk;
input [3:0] DataIn;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or DataIn or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MCD_vlg_check_tst (
	CarryFlag,
	DataOut,
	PortID,
	PortRead,
	PortWrite,
	ZeroFlag,
	sampler_rx
);
input  CarryFlag;
input [3:0] DataOut;
input [2:0] PortID;
input  PortRead;
input  PortWrite;
input  ZeroFlag;
input sampler_rx;

reg  CarryFlag_expected;
reg [3:0] DataOut_expected;
reg [2:0] PortID_expected;
reg  PortRead_expected;
reg  PortWrite_expected;
reg  ZeroFlag_expected;

reg  CarryFlag_prev;
reg [3:0] DataOut_prev;
reg [2:0] PortID_prev;
reg  PortRead_prev;
reg  PortWrite_prev;
reg  ZeroFlag_prev;

reg  CarryFlag_expected_prev;
reg [3:0] DataOut_expected_prev;
reg [2:0] PortID_expected_prev;
reg  PortRead_expected_prev;
reg  PortWrite_expected_prev;
reg  ZeroFlag_expected_prev;

reg  last_CarryFlag_exp;
reg [3:0] last_DataOut_exp;
reg [2:0] last_PortID_exp;
reg  last_PortRead_exp;
reg  last_PortWrite_exp;
reg  last_ZeroFlag_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	CarryFlag_prev = CarryFlag;
	DataOut_prev = DataOut;
	PortID_prev = PortID;
	PortRead_prev = PortRead;
	PortWrite_prev = PortWrite;
	ZeroFlag_prev = ZeroFlag;
end

// update expected /o prevs

always @(trigger)
begin
	CarryFlag_expected_prev = CarryFlag_expected;
	DataOut_expected_prev = DataOut_expected;
	PortID_expected_prev = PortID_expected;
	PortRead_expected_prev = PortRead_expected;
	PortWrite_expected_prev = PortWrite_expected;
	ZeroFlag_expected_prev = ZeroFlag_expected;
end



// expected CarryFlag
initial
begin
	CarryFlag_expected = 1'bX;
end 
// expected DataOut[ 3 ]
initial
begin
	DataOut_expected[3] = 1'bX;
end 
// expected DataOut[ 2 ]
initial
begin
	DataOut_expected[2] = 1'bX;
end 
// expected DataOut[ 1 ]
initial
begin
	DataOut_expected[1] = 1'bX;
end 
// expected DataOut[ 0 ]
initial
begin
	DataOut_expected[0] = 1'bX;
end 
// expected PortID[ 2 ]
initial
begin
	PortID_expected[2] = 1'bX;
end 
// expected PortID[ 1 ]
initial
begin
	PortID_expected[1] = 1'bX;
end 
// expected PortID[ 0 ]
initial
begin
	PortID_expected[0] = 1'bX;
end 

// expected PortRead
initial
begin
	PortRead_expected = 1'bX;
end 

// expected PortWrite
initial
begin
	PortWrite_expected = 1'bX;
end 

// expected ZeroFlag
initial
begin
	ZeroFlag_expected = 1'bX;
end 
// generate trigger
always @(CarryFlag_expected or CarryFlag or DataOut_expected or DataOut or PortID_expected or PortID or PortRead_expected or PortRead or PortWrite_expected or PortWrite or ZeroFlag_expected or ZeroFlag)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CarryFlag = %b | expected DataOut = %b | expected PortID = %b | expected PortRead = %b | expected PortWrite = %b | expected ZeroFlag = %b | ",CarryFlag_expected_prev,DataOut_expected_prev,PortID_expected_prev,PortRead_expected_prev,PortWrite_expected_prev,ZeroFlag_expected_prev);
	$display("| real CarryFlag = %b | real DataOut = %b | real PortID = %b | real PortRead = %b | real PortWrite = %b | real ZeroFlag = %b | ",CarryFlag_prev,DataOut_prev,PortID_prev,PortRead_prev,PortWrite_prev,ZeroFlag_prev);
`endif
	if (
		( CarryFlag_expected_prev !== 1'bx ) && ( CarryFlag_prev !== CarryFlag_expected_prev )
		&& ((CarryFlag_expected_prev !== last_CarryFlag_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CarryFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CarryFlag_expected_prev);
		$display ("     Real value = %b", CarryFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CarryFlag_exp = CarryFlag_expected_prev;
	end
	if (
		( DataOut_expected_prev[0] !== 1'bx ) && ( DataOut_prev[0] !== DataOut_expected_prev[0] )
		&& ((DataOut_expected_prev[0] !== last_DataOut_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataOut_expected_prev);
		$display ("     Real value = %b", DataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DataOut_exp[0] = DataOut_expected_prev[0];
	end
	if (
		( DataOut_expected_prev[1] !== 1'bx ) && ( DataOut_prev[1] !== DataOut_expected_prev[1] )
		&& ((DataOut_expected_prev[1] !== last_DataOut_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataOut_expected_prev);
		$display ("     Real value = %b", DataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DataOut_exp[1] = DataOut_expected_prev[1];
	end
	if (
		( DataOut_expected_prev[2] !== 1'bx ) && ( DataOut_prev[2] !== DataOut_expected_prev[2] )
		&& ((DataOut_expected_prev[2] !== last_DataOut_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataOut_expected_prev);
		$display ("     Real value = %b", DataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DataOut_exp[2] = DataOut_expected_prev[2];
	end
	if (
		( DataOut_expected_prev[3] !== 1'bx ) && ( DataOut_prev[3] !== DataOut_expected_prev[3] )
		&& ((DataOut_expected_prev[3] !== last_DataOut_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataOut_expected_prev);
		$display ("     Real value = %b", DataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DataOut_exp[3] = DataOut_expected_prev[3];
	end
	if (
		( PortID_expected_prev[0] !== 1'bx ) && ( PortID_prev[0] !== PortID_expected_prev[0] )
		&& ((PortID_expected_prev[0] !== last_PortID_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PortID[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PortID_expected_prev);
		$display ("     Real value = %b", PortID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PortID_exp[0] = PortID_expected_prev[0];
	end
	if (
		( PortID_expected_prev[1] !== 1'bx ) && ( PortID_prev[1] !== PortID_expected_prev[1] )
		&& ((PortID_expected_prev[1] !== last_PortID_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PortID[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PortID_expected_prev);
		$display ("     Real value = %b", PortID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PortID_exp[1] = PortID_expected_prev[1];
	end
	if (
		( PortID_expected_prev[2] !== 1'bx ) && ( PortID_prev[2] !== PortID_expected_prev[2] )
		&& ((PortID_expected_prev[2] !== last_PortID_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PortID[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PortID_expected_prev);
		$display ("     Real value = %b", PortID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PortID_exp[2] = PortID_expected_prev[2];
	end
	if (
		( PortRead_expected_prev !== 1'bx ) && ( PortRead_prev !== PortRead_expected_prev )
		&& ((PortRead_expected_prev !== last_PortRead_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PortRead :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PortRead_expected_prev);
		$display ("     Real value = %b", PortRead_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PortRead_exp = PortRead_expected_prev;
	end
	if (
		( PortWrite_expected_prev !== 1'bx ) && ( PortWrite_prev !== PortWrite_expected_prev )
		&& ((PortWrite_expected_prev !== last_PortWrite_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PortWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PortWrite_expected_prev);
		$display ("     Real value = %b", PortWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PortWrite_exp = PortWrite_expected_prev;
	end
	if (
		( ZeroFlag_expected_prev !== 1'bx ) && ( ZeroFlag_prev !== ZeroFlag_expected_prev )
		&& ((ZeroFlag_expected_prev !== last_ZeroFlag_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ZeroFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ZeroFlag_expected_prev);
		$display ("     Real value = %b", ZeroFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ZeroFlag_exp = ZeroFlag_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MCD_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] DataIn;
reg reset;
// wires                                               
wire CarryFlag;
wire [3:0] DataOut;
wire [2:0] PortID;
wire PortRead;
wire PortWrite;
wire ZeroFlag;

wire sampler;                             

// assign statements (if any)                          
MCD i1 (
// port map - connection between master ports and signals/registers   
	.CarryFlag(CarryFlag),
	.clk(clk),
	.DataIn(DataIn),
	.DataOut(DataOut),
	.PortID(PortID),
	.PortRead(PortRead),
	.PortWrite(PortWrite),
	.reset(reset),
	.ZeroFlag(ZeroFlag)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #20000 1'b0;
end 
// DataIn[ 3 ]
initial
begin
	DataIn[3] = 1'b0;
	DataIn[3] = #120000 1'b1;
	DataIn[3] = #40000 1'b0;
end 
// DataIn[ 2 ]
initial
begin
	DataIn[2] = 1'b0;
	DataIn[2] = #20000 1'b1;
	DataIn[2] = #40000 1'b0;
end 
// DataIn[ 1 ]
initial
begin
	DataIn[1] = 1'b0;
	DataIn[1] = #60000 1'b1;
	DataIn[1] = #60000 1'b0;
end 
// DataIn[ 0 ]
initial
begin
	DataIn[0] = 1'b0;
	DataIn[0] = #20000 1'b1;
	DataIn[0] = #100000 1'b0;
end 

MCD_vlg_sample_tst tb_sample (
	.clk(clk),
	.DataIn(DataIn),
	.reset(reset),
	.sampler_tx(sampler)
);

MCD_vlg_check_tst tb_out(
	.CarryFlag(CarryFlag),
	.DataOut(DataOut),
	.PortID(PortID),
	.PortRead(PortRead),
	.PortWrite(PortWrite),
	.ZeroFlag(ZeroFlag),
	.sampler_rx(sampler)
);
endmodule

